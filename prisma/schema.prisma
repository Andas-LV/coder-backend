generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  gemini
  deepseek
  llama
}

model User {
  id         String  @id @unique
  provider   String
  providerId String
  email      String
  name       String?
  image      String?
  chats      Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerId])
}

model Chat {
  id         String    @id @default(uuid())
  name       String
  aiProvider Provider
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  requests   Request[] // üëà —Å–≤—è–∑—å —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Request {
  id       String @id @default(cuid())
  prompt   String
  response String
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String

  createdAt DateTime @default(now())
}

enum QrLoginStatus {
  PENDING
  SCANNED
  EXPIRED
}

model QrLoginToken {
  id        String        @id @default(cuid())
  token     String        @unique
  status    QrLoginStatus @default(PENDING)
  userId    String?
  expiresAt DateTime
  createdAt DateTime      @default(now())
}
